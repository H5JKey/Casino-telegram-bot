import telebot
import time
import os
from dotenv import load_dotenv

from database import *
from rooms import *



load_dotenv()
bot = telebot.TeleBot(os.getenv('API_KEY'))
rooms = []





def roll(chat_id):
	value = bot.send_dice(chat_id, "üé∞").dice.value
	MAX = 64
	value = (value - 1) / MAX
	probabilities = {30: 0.01, 15: 0.02, 5: 0.05, 2: 0.1, 1: 0.2}
	cumulative_prob = 0
	for result_value, prob in probabilities.items():
		cumulative_prob += prob
		if value <= cumulative_prob:
			return result_value
	return 0


@bot.message_handler(commands=['create'])
def create_room(message):
	args = message.text.split()
	if len(args) != 2:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
	else:
		room = find_room_by_player(message.from_user.id,rooms)
		if (room is not None):
			bot.send_message(message.chat.id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
		else:
			room_id = args[1]
			room = find_room_by_id(room_id, rooms)
			if (room is not None):
				bot.send_message(message.chat.id, "–¢–∞–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å!")
			else:
				room = Room(room_id)
				room.players.append(Player(message.from_user.id,message.chat.id))
				rooms.append(room)
				bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É. –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")

				


@bot.message_handler(commands=['join'])
def join_room(message):
	args = message.text.split()
	if len(args) != 2:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
	else:
		room = find_room_by_player(message.from_user.id, rooms)
		if (room is not None):
			bot.send_message(message.chat.id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
		else:
			room_id = args[1]
			room = find_room_by_id(room_id, rooms)
			if (room is None):
				bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç!")
			else:
				room.players.append(Player(message.from_user.id, message.chat.id))
				room.started = True
				bot.send_message(message.chat.id,
						 "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ")
				if (len(room.players)==2):
					for player in room.players:
						bot.send_message(player.chat_id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")



def handle_game_result(winner, loser):
	diff = min(loser.bet,winner.bet * 2)

	#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
	loser_points=get_data(loser.id)[0]
	update_points(loser.id, loser_points-diff)
	bot.send_message(
		loser.chat_id,
		f"–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∫–∏–Ω—É–ª {winner.score}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {diff} –º–æ–Ω–µ—Ç!"
	)
	bot.send_message(
		loser.chat_id,
		f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {str(loser_points-diff)} –º–æ–Ω–µ—Ç"
	)

	#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
	winner_points=get_data(winner.id)[0]
	update_points(winner.id, winner_points+diff)
	bot.send_message(
		winner.chat_id,
		f"–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∫–∏–Ω—É–ª {loser.score}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {diff} –º–æ–Ω–µ—Ç!"
	)
	bot.send_message(
		winner.chat_id,
		f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {str(winner_points+diff)} –º–æ–Ω–µ—Ç"
	)
	
	

@bot.message_handler(commands=['throw'])
def throw_command(message):
	args = message.text.split()
	if len(args) != 2:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
	else:
		room = find_room_by_player(message.from_user.id, rooms)
		if (room is None or not room.started):
			bot.send_message(message.chat.id,
					 "–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")
		else:
			data = get_data(message.from_user.id)
			if (data is not None):
				points = data[0]
				try:
					num = int(args[1])
					if (num < 0):
						bot.send_message(
						    message.chat.id,
						    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç!")
					elif (points >= num):
						user_index = 0
						if (room.players[0].id == message.from_user.id):
							user_index = 0
						else:
							user_index = 1
						room.players[user_index].score = bot.send_dice(
						    message.chat.id, "üé≤").dice.value
						room.players[user_index].bet = num
						bot.send_message(
						    message.chat.id,
						    f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {num} –º–æ–Ω–µ—Ç. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!")
						
						#–µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –∫–∏–Ω—É–ª–∏ –∫—É–±–∏–∫
						if (room.players[0].bet>0 and room.players[1].bet>0):
							time.sleep(0.5)
							if (room.players[1].score > room.players[0].score):
								handle_game_result(room.players[1], room.players[0])
							elif (room.players[0].score > room.players[1].score):
								handle_game_result(room.players[0], room.players[1])
							else:
								for i in range(0,2):
									bot.send_message(
										room.players[i].chat_id,
										"–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∫–∏–Ω—É–ª —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –∏ –≤—ã. –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ"
									)
							#–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
							room.players[0].score = 0
							room.players[0].bet = 0
							room.players[1].score = 0
							room.players[1].bet = 0
					else:
						bot.send_message(
						    message.chat.id,
						    "–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥! –í–≤–µ–¥–∏—Ç–µ /money –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
						)
				except ValueError:
					bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")


@bot.message_handler(commands=['leave'])
def leave_room(message):
	room = find_room_by_player(message.from_user.id, rooms)
	if (room is None):
		bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
	else:
		room.players.clear()
		room.id=None
		rooms.remove(room)
		bot.send_message(message.chat.id,
				 "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã! –ö–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞")


@bot.message_handler(commands=['roll'])
def roll_command(message):
	args = message.text.split()
	if len(args) != 2:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
	else:
		data = get_data(message.from_user.id)
		if (data is not None):
			points = data[0]
			try:
				num = int(args[1])
				if (num < 0):
					bot.send_message(
					    message.chat.id,
					    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç!")
				elif (points >= num):
					points -= num
					rolled = roll(message.chat.id)
					time.sleep(0.5)
					points += rolled * num
					if (rolled > 0):
						bot.send_message(
						    message.chat.id,
						    f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {str((rolled-1)*num)} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {str(points)} –º–æ–Ω–µ—Ç"
						)
					else:
						bot.send_message(
						    message.chat.id,
						    f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {str(points)} –º–æ–Ω–µ—Ç")
					update_points(message.from_user.id, points)
				else:
					bot.send_message(
					    message.chat.id,
					    "–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥! –í–≤–µ–¥–∏—Ç–µ /money –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
			except ValueError:
				bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")


@bot.message_handler(commands=['money'])
def add_money(message):
	cooldown = 5 * 60
	data = get_data(message.from_user.id)
	if (data is not None):
		points, time = data
		current_time = message.date
		if (current_time - time >= cooldown):
			points += 1000
			bot.send_message(
			    message.chat.id,
			    f"–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ 100 –º–æ–Ω–µ—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {str(points)} –º–æ–Ω–µ—Ç")
			update_time(message.from_user.id, current_time)
			update_points(message.from_user.id, points)
		else:
			bot.send_message(
			    message.chat.id,
			    f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {str(cooldown-(current_time-time))} —Å–µ–∫—É–Ω–¥"
			)


@bot.message_handler(commands=['check'])
def check_money(message):
	data = get_data(message.from_user.id)
	if (data is not None):
		points = data[0]
		bot.send_message(message.chat.id, f"–£ –≤–∞—Å {points} –º–æ–Ω–µ—Ç")


def get_username_by_id(user_id):
	try:
		chat = bot.get_chat(user_id)
		return chat.username
	except telebot.apihelper.ApiTelegramException as e:
		print(f"Error getting chat info: {e}")
		return None


@bot.message_handler(commands=['top'])
def show_top(message):
	user_data = get_data(message.from_user.id)
	all_users = get_alldata()
	if (user_data is not None and all_users is not None):
		all_users = sorted(all_users, key=lambda x: x[1], reverse=True)
		out_message = ''
		top = 0
		for user in all_users[:3]:
			out_message += f"{'ü•áü•àü•â'[top]} :  @{get_username_by_id(user[0])} - {user[1]} –º–æ–Ω–µ—Ç" + '\n'
			top += 1

		out_message += ".....\n"
		user_top = all_users.index(
		    (message.from_user.id, user_data[0], user_data[1]))
		out_message += f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {user_top+1}"
		bot.send_message(message.chat.id, out_message)


bot.polling(none_stop=True)
